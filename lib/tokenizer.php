<?php

class Tokenizer{
    public function tokenize($file){

        $tokens = token_get_all(file_get_contents($file));

        $globals = array(
            '$GLOBALS',
            '$_SERVER',
            '$_GET',
            '$_POST',
            '$_FILES',
            '$_COOKIE',
            '$_SESSION',
            '$_REQUEST',
            '$_ENV',
        );

        // prevent name clashes with randomly generated strings and native functions
        $registry = get_defined_functions();
        $registry = $registry['internal'];

        // first pass to change all the variable names and function name declarations
        foreach($tokens as $key => $element){
            // make sure it's an interesting token
            if(!is_array($element)){
                continue;
            }
            switch ($element[0]) {
                case T_FUNCTION:
                    $prefix = '';
                    // this jumps over the whitespace to get the function name
                    $index = $key + 2;
                    break;

                case T_VARIABLE:
                    // ignore the superglobals
                    if(in_array($element[1], $globals)){
                        continue 2;
                    }
                    $prefix = '$';
                    $index = $key;
                    break;

                default:
                    continue 2;
            }

            
            // rename the variable
            $return[$tokens[$index][1]] = 'mysql_real_escape_string( '.$tokens[$index][1].')';
        }

        // second pass to rename all the function invocations
        $tokens = array_map(function($element) use ($registry){
            // check to see if it's a function identifier
            if(is_array($element) && $element[0] === T_STRING){
                // make sure it's one of our registered function names
                if(isset($registry[$element[1]])){
                    // rename the variable
                    $element[1] = 'mysql_real_escape_string( $'.$element[1].')';
                }
            }
            return $element;
        },$tokens);

        


        return $return;

    }
}
?>
